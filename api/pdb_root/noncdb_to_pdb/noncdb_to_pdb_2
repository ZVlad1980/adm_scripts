SQL> @$ORACLE_HOME/rdbms/admin/noncdb_to_pdb.sql
SQL> SET SERVEROUTPUT ON
SQL> SET FEEDBACK 1
SQL> SET NUMWIDTH 10
SQL> SET LINESIZE 80
SQL> SET TRIMSPOOL ON
SQL> SET TAB OFF
SQL> SET PAGESIZE 100
SQL>
SQL> WHENEVER SQLERROR EXIT;
SQL>
SQL> DOC
DOC>#######################################################################
DOC>#######################################################################
DOC>   The following statement will cause an "ORA-01403: no data found"
DOC>   error if we're not in a PDB.
DOC>   This script is intended to be run right after plugin of a PDB,
DOC>   while inside the PDB.
DOC>#######################################################################
DOC>#######################################################################
DOC>#
SQL>
SQL> VARIABLE cdbname VARCHAR2(128)
SQL> VARIABLE pdbname VARCHAR2(128)
SQL> BEGIN
  2    SELECT sys_context('USERENV', 'CDB_NAME')
  3      INTO :cdbname
  4      FROM dual
  5      WHERE sys_context('USERENV', 'CDB_NAME') is not null;
  6    SELECT sys_context('USERENV', 'CON_NAME')
  7      INTO :pdbname
  8      FROM dual
  9      WHERE sys_context('USERENV', 'CON_NAME') <> 'CDB$ROOT';
 10  END;
 11  /

PL/SQL procedure successfully completed.

SQL>
SQL> COLUMN pdbname NEW_VALUE pdbname
SQL> COLUMN pdbid NEW_VALUE pdbid
SQL>
SQL> select :pdbname pdbname from dual;

PDBNAME
--------------------------------------------------------------------------------
PDB_NODE

1 row selected.

SQL>
SQL> select TO_CHAR(con_id) pdbid from v$pdbs where name='&pdbname';
old   1: select TO_CHAR(con_id) pdbid from v$pdbs where name='&pdbname'
new   1: select TO_CHAR(con_id) pdbid from v$pdbs where name='PDB_NODE'

PDBID
----------------------------------------
4

1 row selected.

SQL>
SQL> -- save pluggable database open mode
SQL> COLUMN open_state_col NEW_VALUE open_sql;
SQL> COLUMN restricted_col NEW_VALUE restricted_state;
SQL> SELECT decode(open_mode,
  2                'READ ONLY', 'ALTER PLUGGABLE DATABASE &pdbname OPEN READ ONLY',
  3                'READ WRITE', 'ALTER PLUGGABLE DATABASE &pdbname OPEN', '')
  4           open_state_col,
  5         decode(restricted, 'YES', 'RESTRICTED', '')
  6           restricted_col
  7         from v$pdbs where name='&pdbname';
old   2:               'READ ONLY', 'ALTER PLUGGABLE DATABASE &pdbname OPEN READ ONLY',
new   2:               'READ ONLY', 'ALTER PLUGGABLE DATABASE PDB_NODE OPEN READ ONLY',
old   3:               'READ WRITE', 'ALTER PLUGGABLE DATABASE &pdbname OPEN', '')
new   3:               'READ WRITE', 'ALTER PLUGGABLE DATABASE PDB_NODE OPEN', '')
old   7:        from v$pdbs where name='&pdbname'
new   7:        from v$pdbs where name='PDB_NODE'

OPEN_STATE_COL                                   RESTRICTED
------------------------------------------------ ----------
ALTER PLUGGABLE DATABASE PDB_NODE OPEN           RESTRICTED

1 row selected.

SQL>
SQL> -- save value for _system_trig_enabled parameter
SQL> COLUMN sys_trig NEW_VALUE sys_trig_enabled  NOPRINT;
SQL> SELECT parm_values.ksppstvl as sys_trig
  2     FROM sys.x$ksppi parms, sys.x$ksppsv parm_values
  3     WHERE parms.ksppinm = '_system_trig_enabled' AND
  4           parms.inst_id = USERENV('Instance') AND
  5           parms.indx = parm_values.indx;




1 row selected.

SQL>
SQL> -- if pdb was already closed, don't exit on error
SQL> WHENEVER SQLERROR CONTINUE;
SQL>
SQL> alter pluggable database "&pdbname" close;
old   1: alter pluggable database "&pdbname" close
new   1: alter pluggable database "PDB_NODE" close

Pluggable database altered.

SQL>
SQL> WHENEVER SQLERROR EXIT;
SQL>
SQL> alter session set container = CDB$ROOT;

Session altered.

SQL> alter system flush shared_pool;

System altered.

SQL> /

System altered.

SQL> /

System altered.

SQL> alter session set container = "&pdbname";
old   1: alter session set container = "&pdbname"
new   1: alter session set container = "PDB_NODE"

Session altered.

SQL>
SQL> alter pluggable database "&pdbname" open restricted;
old   1: alter pluggable database "&pdbname" open restricted
new   1: alter pluggable database "PDB_NODE" open restricted

Warning: PDB altered with errors.

SQL>
SQL> -- initial setup before beginning the script
SQL> alter session set "_ORACLE_SCRIPT"=true;

Session altered.

SQL> alter session set "_NONCDB_TO_PDB"=true;

Session altered.

SQL> ALTER SESSION SET NLS_LENGTH_SEMANTICS=BYTE;

Session altered.

SQL> ALTER SYSTEM SET "_system_trig_enabled"=FALSE SCOPE=MEMORY;

System altered.

SQL> exec dbms_pdb.noncdb_to_pdb(1);

PL/SQL procedure successfully completed.

SQL>
SQL> -- if we're plugging in a database that had been upgraded, we need to:
SQL> -- 1) generate signatures for common tables
SQL> -- 2) patch up tables that with column order differences. This can happen due
SQL> --    to db creation scripts adding columns to the middle of a table vs
SQL> --    upgrade scripts adding to the end via ALTER TABLE ADD
SQL>
SQL> alter session set container=CDB$ROOT;

Session altered.

SQL>
SQL> -- create temporary object-linked view to get list of objects marked as common
SQL> -- in CDB$ROOT
SQL> create or replace view sys.cdb$common_root_objects&pdbid sharing=object as
  2  select u.name owner, o.name object_name, o.type# object_type, o.namespace nsp,
  3         o.subname object_subname, o.signature object_sig,
  4         decode(bitand(o.flags, 65536), 65536, 'MDL', 'OBL') sharing
  5    from sys.obj$ o, sys.user$ u where
  6    o.owner#=u.user# and bitand(o.flags, 196608) <> 0;
old   1: create or replace view sys.cdb$common_root_objects&pdbid sharing=object as
new   1: create or replace view sys.cdb$common_root_objects4 sharing=object as

View created.

SQL>
SQL> -- object-linked view for list of common users
SQL> create or replace view sys.cdb$common_users&pdbid sharing=object as
  2  select name from sys.user$ where bitand(spare1, 128) <> 0;
old   1: create or replace view sys.cdb$common_users&pdbid sharing=object as
new   1: create or replace view sys.cdb$common_users4 sharing=object as

View created.

SQL>
SQL> -- object-linked view for accessing dependency$
SQL> create or replace view sys.cdb$rootdeps&pdbid sharing=object as select du.name as owner, do.name as name, do.type# as d_type#, do.namespace as d_namespace,pu.name as referenced_owner, po.name as referenced_name, po.type# as p_type#, po.namespace as p_namespace,d.order#,d.property,d.d_attrs,d.d_reason from sys.obj$ do, sys.obj$ po, sys.user$ du, sys.user$ pu, sys.dependency$ d where du.user#=do.owner# and pu.user#=po.owner# and do.obj#=d_obj# and po.obj#=p_obj#;
old   1: create or replace view sys.cdb$rootdeps&pdbid sharing=object as select du.name as owner, do.name as name, do.type# as d_type#, do.namespace as d_namespace,pu.name as referenced_owner, po.name as referenced_name, po.type# as p_type#, po.namespace as p_namespace,d.order#,d.property,d.d_attrs,d.d_reason from sys.obj$ do, sys.obj$ po, sys.user$ du, sys.user$ pu, sys.dependency$ d where du.user#=do.owner# and pu.user#=po.owner# and do.obj#=d_obj# and po.obj#=p_obj#
new   1: create or replace view sys.cdb$rootdeps4 sharing=object as select du.name as owner, do.name as name, do.type# as d_type#, do.namespace as d_namespace,pu.name as referenced_owner, po.name as referenced_name, po.type# as p_type#, po.namespace as p_namespace,d.order#,d.property,d.d_attrs,d.d_reason from sys.obj$ do, sys.obj$ po, sys.user$ du, sys.user$ pu, sys.dependency$ d where du.user#=do.owner# and pu.user#=po.owner# and do.obj#=d_obj# and po.obj#=p_obj#

View created.

SQL>
SQL> -- switch into PDB
SQL> alter session set container="&pdbname";
old   1: alter session set container="&pdbname"
new   1: alter session set container="PDB_NODE"

Session altered.

SQL>
SQL> create or replace view sys.cdb$common_root_objects&pdbid sharing=object as
  2  select u.name owner, o.name object_name, o.type# object_type, o.namespace nsp,
  3         o.subname object_subname, o.signature object_sig,
  4         decode(bitand(o.flags, 65536), 65536, 'MDL', 'OBL') sharing
  5    from sys.obj$ o, sys.user$ u where
  6    o.owner#=u.user# and bitand(o.flags, 196608) <> 0;
old   1: create or replace view sys.cdb$common_root_objects&pdbid sharing=object as
new   1: create or replace view sys.cdb$common_root_objects4 sharing=object as

View created.

SQL>
SQL> create or replace view sys.cdb$common_users&pdbid sharing=object as
  2  select name from sys.user$ where bitand(spare1, 128) <> 0;
old   1: create or replace view sys.cdb$common_users&pdbid sharing=object as
new   1: create or replace view sys.cdb$common_users4 sharing=object as

View created.

SQL>
SQL> create or replace view sys.cdb$rootdeps&pdbid sharing=object as select du.name as owner, do.name as name, do.type# as d_type#, do.namespace as d_namespace,pu.name as referenced_owner, po.name as referenced_name, po.type# as p_type#, po.namespace as p_namespace,d.order#,d.property,d.d_attrs,d.d_reason from sys.obj$ do, sys.obj$ po, sys.user$ du, sys.user$ pu, sys.dependency$ d where du.user#=do.owner# and pu.user#=po.owner# and do.obj#=d_obj# and po.obj#=p_obj#;
old   1: create or replace view sys.cdb$rootdeps&pdbid sharing=object as select du.name as owner, do.name as name, do.type# as d_type#, do.namespace as d_namespace,pu.name as referenced_owner, po.name as referenced_name, po.type# as p_type#, po.namespace as p_namespace,d.order#,d.property,d.d_attrs,d.d_reason from sys.obj$ do, sys.obj$ po, sys.user$ du, sys.user$ pu, sys.dependency$ d where du.user#=do.owner# and pu.user#=po.owner# and do.obj#=d_obj# and po.obj#=p_obj#
new   1: create or replace view sys.cdb$rootdeps4 sharing=object as select du.name as owner, do.name as name, do.type# as d_type#, do.namespace as d_namespace,pu.name as referenced_owner, po.name as referenced_name, po.type# as p_type#, po.namespace as p_namespace,d.order#,d.property,d.d_attrs,d.d_reason from sys.obj$ do, sys.obj$ po, sys.user$ du, sys.user$ pu, sys.dependency$ d where du.user#=do.owner# and pu.user#=po.owner# and do.obj#=d_obj# and po.obj#=p_obj#

View created.

SQL>
SQL> create or replace view sys.cdb$objects&pdbid sharing=none as
  2  select u.name owner, o.name object_name, o.signature object_sig, o.namespace nsp,
  3         o.subname object_subname, o.obj# object_id, o.type# object_type, o.flags flags
  4    from sys.obj$ o, sys.user$ u
  5    where o.owner#=u.user#;
old   1: create or replace view sys.cdb$objects&pdbid sharing=none as
new   1: create or replace view sys.cdb$objects4 sharing=none as

View created.

SQL>
SQL> create or replace view sys.cdb$tables&pdbid sharing=none as
  2  select * from sys.cdb$objects&pdbid where object_type=2;
old   1: create or replace view sys.cdb$tables&pdbid sharing=none as
new   1: create or replace view sys.cdb$tables4 sharing=none as
old   2: select * from sys.cdb$objects&pdbid where object_type=2
new   2: select * from sys.cdb$objects4 where object_type=2

View created.

SQL>
SQL>
SQL> ---------------------------------------------------------------------------
SQL> -- PRE-SCRIPT CHECKS GO HERE:
SQL>
SQL> set serveroutput on
SQL>
SQL> -- Check that we have no invalid table data
SQL> DOC
DOC>#######################################################################
DOC>#######################################################################
DOC>
DOC>     The following statement will cause an "ORA-01722: invalid number"
DOC>     error, if the database contains invalid data as a result of type
DOC>     evolution which was performed without the data being converted.
DOC>
DOC>     To resolve this specific "ORA-01722: invalid number" error:
DOC>       Perform the data conversion (details below) in the pluggable database.
DOC>
DOC>     Please refer to Oracle Database Object-Relational Developer's Guide
DOC>     for more information about type evolution.
DOC>
DOC>     Data in columns of evolved types must be converted before the
DOC>     database can be converted.
DOC>
DOC>     The following commands, run inside the PDB, will perform the data
DOC>     conversion for Oracle supplied data:
DOC>
DOC>     @?/rdbms/admin/utluppkg.sql
DOC>     SET SERVEROUTPUT ON;
DOC>     exec dbms_preup.run_fixup_and_report('INVALID_SYS_TABLEDATA');
DOC>     SET SERVEROUTPUT OFF;
DOC>
DOC>     You should then confirm that any non-Oracle supplied data is also
DOC>     converted.  You should review the data and determine if it needs
DOC>     to be converted or removed.
DOC>
DOC>     To view the data that is affected by type evolution, execute the
DOC>     following inside the PDB:
DOC>
DOC>     SELECT rpad(u.name,128) TABLENAME, rpad(o.name,128) OWNER,
DOC>       rpad(c.name,128) COLNAME FROM SYS.OBJ$ o, SYS.COL$ c, SYS.COLTYPE$ t,
DOC>         SYS.USER$ u
DOC>         WHERE o.OBJ# = t.OBJ# AND c.OBJ# = t.OBJ# AND c.COL# = t.COL#
DOC>           AND t.INTCOL# = c.INTCOL# AND BITAND(t.FLAGS, 256) = 256
DOC>           AND o.OWNER# = u.USER# AND o.OWNER# NOT IN
DOC>            (SELECT UNIQUE (d.USER_ID) FROM SYS.DBA_USERS d, SYS.REGISTRY$ r
DOC>               WHERE d.USER_ID = r.SCHEMA# and r.NAMESPACE='SERVER');
DOC>
DOC>     Once the data is confirmed, the following commands, run inside the PDB,
DOC>     will convert the data returned by the above query.
DOC>
DOC>     @?/rdbms/admin/utluppkg.sql
DOC>     SET SERVEROUTPUT ON;
DOC>     exec dbms_preup.run_fixup_and_report('INVALID_USR_TABLEDATA');
DOC>     SET SERVEROUTPUT OFF;
DOC>
DOC>     Depending on the amount of data involved, converting the evolved type
DOC>     data can take a significant amount of time.
DOC>
DOC>     After this is complete, please rerun noncdb_to_pdb.sql.
DOC>
DOC>#######################################################################
DOC>#######################################################################
DOC>#
SQL>
SQL> declare
  2    do_abort boolean := false;
  3  begin
  4    if dbms_preup.condition_exists ('INVALID_SYS_TABLEDATA') then
  5      -- dump out the info
  6      dbms_preup.run_check('INVALID_SYS_TABLEDATA');
  7      do_abort := TRUE;
  8    end if;
  9    if dbms_preup.condition_exists ('INVALID_USR_TABLEDATA') THEN
 10      -- dump out the info
 11      dbms_preup.run_check('INVALID_USR_TABLEDATA');
 12      do_abort := TRUE;
 13    END IF;
 14    If do_abort THEN
 15      dbms_output.put_line ('Invalid table data.');
 16      dbms_output.put_line ('Non-CDB conversion aborting.');
 17      dbms_output.put_line ('For instructions, look for ORA-01722 in this script.');
 18      dbms_output.put_line ('Please resolve these and rerun noncdb_to_pdb.sql.');
 19      RAISE INVALID_NUMBER;
 20    end if;
 21  end;
 22  /

PL/SQL procedure successfully completed.

SQL>
SQL> -- END PRE-SCRIPT CHECKS
SQL> ---------------------------------------------------------------------------
SQL>
SQL> -- mark users and roles in our PDB as common if they exist as common in ROOT
SQL> DECLARE
  2    cursor c is
  3      select p.user# from sys.cdb$common_users&pdbid r, sys.user$ p
  4      where r.name=p.name and bitand(p.spare1, 128)=0;
  5  BEGIN
  6    FOR u in c
  7    LOOP
  8      BEGIN
  9        execute immediate 'update sys.user$ set spare1=spare1+128 where user#=' ||
 10                          u.user#;
 11      END;
 12    END LOOP;
 13    commit;
 14  END;
 15  /
old   3:     select p.user# from sys.cdb$common_users&pdbid r, sys.user$ p
new   3:     select p.user# from sys.cdb$common_users4 r, sys.user$ p

PL/SQL procedure successfully completed.

SQL>
SQL> select to_char(sysdate, 'Dy DD-Mon-YYYY HH24:MI:SS') from dual;

TO_CHAR(SYSDATE,'DYDD-MO
------------------------
Sat 21-Apr-2018 10:03:33

1 row selected.

SQL>
SQL> -- mark objects in our PDB as common if they exist as common in ROOT
SQL> DECLARE
  2    cursor c is
  3      select p.object_id, p.flags-bitand(p.flags, 196608) flags,
  4             decode(r.sharing, 'MDL', 65536, 131072) sharing_flag
  5        from sys.cdb$common_root_objects&pdbid r, sys.cdb$objects&pdbid p
  6      where r.owner=p.owner and r.object_name=p.object_name
  7        and r.object_type=p.object_type and r.nsp=p.nsp
  8        and (p.object_subname is null and r.object_subname is null
  9             or r.object_subname=p.object_subname)
 10        and decode(bitand(p.flags, 196608), 65536, 'MDL', 131072, 'OBL', 'NONE')<>r.sharing;
 11  BEGIN
 12    FOR obj in c
 13    LOOP
 14      BEGIN
 15        execute immediate 'update sys.obj$ set flags=' || (obj.flags + obj.sharing_flag) ||
 16                          ' where obj#=' || obj.object_id;
 17      END;
 18    END LOOP;
 19    commit;
 20  END;
 21  /
old   5:       from sys.cdb$common_root_objects&pdbid r, sys.cdb$objects&pdbid p
new   5:       from sys.cdb$common_root_objects4 r, sys.cdb$objects4 p


PL/SQL procedure successfully completed.

SQL>
SQL> select to_char(sysdate, 'Dy DD-Mon-YYYY HH24:MI:SS') from dual;

TO_CHAR(SYSDATE,'DYDD-MO
------------------------
Sat 21-Apr-2018 10:32:50

1 row selected.

SQL>
SQL> -- generate signatures for the common tables which don't have them
SQL> DECLARE
  2    cursor c is
  3      select r.owner, r.object_name
  4        from sys.cdb$common_root_objects&pdbid r, sys.cdb$tables&pdbid p
  5      where r.owner=p.owner and r.object_name=p.object_name
  6        and r.object_type=2 and p.object_sig is null
  7        and p.object_name not in ('OBJ$', 'USER$');
  8  BEGIN
  9    FOR tab in c
 10    LOOP
 11      BEGIN
 12        execute immediate 'ALTER TABLE ' || tab.owner || '."' ||
 13                          tab.object_name || '" UPGRADE';
 14      EXCEPTION
 15        WHEN OTHERS THEN
 16        BEGIN
 17          IF (sqlcode = -600 or sqlcode = -602 or sqlcode = -603) THEN
 18            raise;
 19          END IF;
 20        END;
 21      END;
 22    END LOOP;
 23    commit;
 24  END;
 25  /
old   4:       from sys.cdb$common_root_objects&pdbid r, sys.cdb$tables&pdbid p
new   4:       from sys.cdb$common_root_objects4 r, sys.cdb$tables4 p

PL/SQL procedure successfully completed.

SQL>
SQL> -- for each table whose signature doesn't match ROOT's, mark its PL/SQL
SQL> -- dependents for local MCode
SQL> DECLARE
  2    cursor c is
  3      select obj#
  4        from sys.obj$ o, sys.user$ u, sys.cdb$common_root_objects&pdbid ro
  5      where o.type# <> 4 and u.name=ro.owner and u.user#=o.owner#
  6        and o.name=ro.object_name and o.type#=ro.object_type and obj# in
  7        (select d_obj# from sys.dependency$ where p_obj# in
  8          (select p.object_id from sys.CDB$common_root_objects&pdbid r,
  9                                   sys.cdb$tables&pdbid p
 10           where r.owner=p.owner and r.object_name=p.object_name
 11             and r.object_type=2 and r.object_sig <> p.object_sig));
 12  BEGIN
 13    FOR obj in c
 14    LOOP
 15      execute immediate
 16        'update sys.obj$ set flags=flags+33554432-bitand(flags, 33554432) where obj#=' || obj.obj#;
 17    END LOOP;
 18    commit;
 19  END;
 20  /
old   4:       from sys.obj$ o, sys.user$ u, sys.cdb$common_root_objects&pdbid ro
new   4:       from sys.obj$ o, sys.user$ u, sys.cdb$common_root_objects4 ro
old   8:         (select p.object_id from sys.CDB$common_root_objects&pdbid r,
new   8:         (select p.object_id from sys.CDB$common_root_objects4 r,
old   9:                                  sys.cdb$tables&pdbid p
new   9:                                  sys.cdb$tables4 p

PL/SQL procedure successfully completed.

SQL>
SQL> select owner#, name from sys.obj$ where bitand(flags, 33554432)=33554432
  2    order by 1, 2;

    OWNER#
----------
NAME
--------------------------------------------------------------------------------
         0
AW_DROP_PROC

         0
DBMS_APPLY_ADM_INTERNAL

         0
DBMS_APPLY_ERROR

         0
DBMS_APPLY_HANDLER_INTERNAL

         0
DBMS_AQADM_SYS

         0
DBMS_CAPTURE_ADM_INTERNAL

         0
DBMS_CAPTURE_PROCESS

         0
DBMS_CAPTURE_SWITCH_INTERNAL

         0
DBMS_CLIENT_RESULT_CACHE

         0
DBMS_CMP_INT

         0
DBMS_CMP_INT

         0
DBMS_DBFS_CONTENT

         0
DBMS_DBFS_CONTENT_ADMIN

         0
DBMS_DBFS_SFS_ADMIN

         0
DBMS_FEATURE_SEGADV_USER

         0
DBMS_INTERNAL_LOGSTDBY

         0
DBMS_ISCHED

         0
DBMS_ISNAPSHOT

         0
DBMS_LOGMNR_INTERNAL

         0
DBMS_LOGMNR_SESSION

         0
DBMS_LOGREP_IMP_INTERNAL

         0
DBMS_LOGREP_UTIL

         0
DBMS_PICKLER

         0
DBMS_PROPAGATION_INTERNAL

         0
DBMS_PRVTAQIP

         0
DBMS_PRVTRMIE

         0
DBMS_PRVTRMIE

         0
DBMS_REGISTRY_SYS

         0
DBMS_REPCAT_UTL4

         0
DBMS_RMGR_GROUP_EXPORT

         0
DBMS_RMGR_PACT_EXPORT

         0
DBMS_RMGR_PLAN_EXPORT

    OWNER#
----------
NAME
--------------------------------------------------------------------------------

         0
DBMS_RMIN_SYS

         0
DBMS_SCHED_MAIN_EXPORT

         0
DBMS_SPACE

         0
DBMS_SPM_INTERNAL

         0
DBMS_SQLTUNE_INTERNAL

         0
DBMS_SQLTUNE_INTERNAL

         0
DBMS_SQLTUNE_UTIL1

         0
DBMS_SQLTUNE_UTIL2

         0
DBMS_STATS

         0
DBMS_STATS_INTERNAL

         0
DBMS_STATS_INTERNAL

         0
DBMS_STREAMS_ADM_IVK

         0
DBMS_STREAMS_ADM_UTL

         0
DBMS_STREAMS_AUTO_INT

         0
DBMS_STREAMS_HANDLER_INTERNAL

         0
DBMS_STREAMS_SM

         0
DBMS_WLM

         0
DBMS_XSTREAM_ADM_UTL

         0
LOGMNR_DICT_CACHE

         0
PRVTPARENTCHILD

         0
PRVT_ACCESS_ADVISOR

         0
PRVT_ADVISOR

         0
PRVT_COMPRESSION

         0
PRVT_HDM

         0
PRVT_SQLPA

         0
PRVT_SYS_TUNE_MVIEW

         0
PRVT_WORKLOAD

         0
WRI$_ADV_HDM_T

         0
WRI$_ADV_OBJSPACE_TREND_T

         0
WRI$_ADV_SPM_EVOLVE

         0
WRI$_ADV_SQLTUNE

         0

    OWNER#
----------
NAME
--------------------------------------------------------------------------------
XS_ACL_INT

         0
XS_DATA_SECURITY_INT

         0
XS_DIAG_INT

         0
XS_NAMESPACE_INT

         5
LOGMNR$KEY_GG_TABF_PUBLIC

         5
LOGMNR$SEQ_GG_TABF_PUBLIC

        25
LTADM

        25
LTUTIL

        25
LT_EXPORT_PKG

        25
WM$CT_I_TRIG

        25
WM$HT_I_TRIG

        25
WM$VTH_D_TRIG

        25
WM$VTH_I_TRIG

        25
WM$VTH_NT_D_TRIG

        25
WM$VTH_NT_I_TRIG

        25
WM$VTH_NT_U_TRIG

      1421
DBMS_CSX_INT

      1421
DBMS_XDBT

      1421
DBMS_XDB_ADMIN

      1421
DBMS_XMLSTORAGE_MANAGE

      1421
PRVT_DBMS_MANAGE_XMLSTORAGE

      1421
XDB$PATCHUPDELETESCHEMA

      1421
XDB$PATCHUPSCHEMA

      1421
XDBCONFIG_VALIDATE


87 rows selected.

SQL>
SQL> -- Step (II)
SQL> --
SQL> -- Mark all metadata links as status 6
SQL> -- skip types w/ non-null subname
SQL> update sys.obj$ set status = 6
  2          where (type# not in (2, 28, 29, 30, 56))
  3          and (type# <> 13 or subname is null)
  4          and status not in (5,6)
  5          and bitand(flags, 65536)=65536;

43116 rows updated.

SQL>
SQL> commit
  2  /

Commit complete.

SQL>
SQL> -- Invalidate all synonym dependents of dbms_standard. If not we will end up
SQL> -- with a timestamp mismatch between dependency  and obj
SQL>
SQL> update sys.obj$ set status=6 where obj# in
  2  (select d_obj# from sys.dependency$
  3   where p_obj# in (select obj# from sys.obj$ where name='DBMS_STANDARD' and
  4                    type# in ( 9, 11) and owner#=0)
  5  ) and type#=5
  6  /

1 row updated.

SQL> commit
  2  /

Commit complete.

SQL>
SQL> alter system flush shared_pool
  2  /

System altered.

SQL>
SQL> alter system flush shared_pool;

System altered.

SQL> /

System altered.

SQL> /

System altered.

SQL>
SQL> -- Step (II)
SQL> --
SQL> -- Recreate package standard and dbms_standard. This is needed to execute
SQL> -- subsequent anonymous blocks
SQL> SET ECHO OFF

Session altered.


Session altered.


Package created.


Session altered.


Session altered.


Package body created.


Session altered.


Grant succeeded.


Session altered.


Session altered.


Package created.


Synonym created.


Grant succeeded.


Session altered.

SQL> -- Step (III)
SQL> --
SQL> -- Invalidate views and synonyms which depend (directly or indirectly) on
SQL> -- invalid objects.
SQL> begin
  2    loop
  3      update sys.obj$ o_outer set status = 6
  4      where     type# in (4, 5)
  5            and status not in (5, 6)
  6            and linkname is null
  7            and ((subname is null) or (subname <> 'DBMS_DBUPGRADE_BABY'))
  8            and exists (select o.obj# from sys.obj$ o, sys.dependency$ d
  9                        where     d.d_obj# = o_outer.obj#
 10                              and d.p_obj# = o.obj#
 11                              and (bitand(d.property, 1) = 1)
 12                              and o.status > 1);
 13      exit when sql%notfound;
 14    end loop;
 15  end;
 16  /

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL>
SQL> alter system flush shared_pool;

System altered.

SQL> /

System altered.

SQL> /

System altered.

SQL>
SQL> -- normalize dependencies for classes.bin objects
SQL> delete from sys.dependency$ where d_obj# in (select obj# from sys.obj$ where bitand(flags,65600)=65600);

3054 rows deleted.

SQL>
SQL> insert into sys.dependency$ (select do.obj#,do.stime,order#,po.obj#,po.stime,do.owner#,property,d_attrs,d_reason from sys.obj$ do,sys.user$ du,sys.obj$ po,sys.user$ pu,sys.cdb$rootdeps&pdbid rd where du.user#=do.owner# and pu.user#=po.owner# and do.name=rd.name and du.name=owner and do.type#=d_type# and po.name=referenced_name and pu.name=referenced_owner and po.type#=p_type# and bitand(do.flags,65600)=65600);
old   1: insert into sys.dependency$ (select do.obj#,do.stime,order#,po.obj#,po.stime,do.owner#,property,d_attrs,d_reason from sys.obj$ do,sys.user$ du,sys.obj$ po,sys.user$ pu,sys.cdb$rootdeps&pdbid rd where du.user#=do.owner# and pu.user#=po.owner# and do.name=rd.name and du.name=owner and do.type#=d_type# and po.name=referenced_name and pu.name=referenced_owner and po.type#=p_type# and bitand(do.flags,65600)=65600)
new   1: insert into sys.dependency$ (select do.obj#,do.stime,order#,po.obj#,po.stime,do.owner#,property,d_attrs,d_reason from sys.obj$ do,sys.user$ du,sys.obj$ po,sys.user$ pu,sys.cdb$rootdeps4 rd where du.user#=do.owner# and pu.user#=po.owner# and do.name=rd.name and du.name=owner and do.type#=d_type# and po.name=referenced_name and pu.name=referenced_owner and po.type#=p_type# and bitand(do.flags,65600)=65600)

3054 rows created.

SQL>
SQL> commit;

Commit complete.

SQL>
SQL> -- get rid of idl_ub1$ rows for MDL java objects
SQL> delete from sys.idl_ub1$ where obj# in (select obj# from sys.obj$ where bitand(flags, 65536)=65536 and type# in (28,29,30,56));

30215 rows deleted.

SQL> commit;

Commit complete.

SQL>
SQL> alter system flush shared_pool;

System altered.

SQL> /

System altered.

SQL>
SQL> -- explicitly compile these now, before close/reopen. Otherwise they would
SQL> -- be used/validated within PDB Open, where such patching (clearing of dict
SQL> -- rows) can't be done.
SQL> alter public synonym ALL_OBJECTS compile;

Synonym altered.

SQL> alter view V_$PARAMETER compile;

View altered.

SQL>
SQL> WHENEVER SQLERROR CONTINUE;
SQL> alter type ANYDATA compile;

Type altered.

SQL> WHENEVER SQLERROR EXIT;
SQL>
SQL> alter system flush shared_pool;

System altered.

SQL> /

System altered.

SQL> /

System altered.

SQL> /

System altered.

SQL>
SQL> -- reopen the PDB
SQL> alter pluggable database "&pdbname" close;
old   1: alter pluggable database "&pdbname" close
new   1: alter pluggable database "PDB_NODE" close

Pluggable database altered.

SQL> alter pluggable database "&pdbname" open restricted;
old   1: alter pluggable database "&pdbname" open restricted
new   1: alter pluggable database "PDB_NODE" open restricted

Warning: PDB altered with errors.

SQL> ALTER SYSTEM SET "_system_trig_enabled"=FALSE SCOPE=MEMORY;

System altered.

SQL>
SQL> alter session set "_ORACLE_SCRIPT"=false;

Session altered.

SQL>
SQL> select status, count(*) from sys.obj$ where status in (5, 6) group by status order by 1;

    STATUS   COUNT(*)
---------- ----------
         5       1739
         6      49147

2 rows selected.

SQL> select count(*) from sys.view$;

  COUNT(*)
----------
      7996

1 row selected.

SQL> select count(*) from sys.obj$ where bitand(flags, 65536)=65536 and obj# in
  2    (select obj# from sys.view$);

  COUNT(*)
----------
      5517

1 row selected.

SQL> select count(*) from sys.procedure$;

  COUNT(*)
----------
      6334

1 row selected.

SQL> select count(*) from sys.obj$ where bitand(flags, 65536)=65536 and obj# in
  2    (select obj# from sys.procedure$);

  COUNT(*)
----------
      1934

1 row selected.

SQL> select count(*) from sys.dir$;

  COUNT(*)
----------
        14

1 row selected.

SQL> select count(*) from sys.obj$ where bitand(flags, 65536)=65536 and obj# in
  2    (select obj# from sys.dir$);

  COUNT(*)
----------
         5

1 row selected.

SQL>
SQL> @@utlrp
SQL> Rem
SQL> Rem $Header: utlrp.sql 24-jul-2003.10:06:51 gviswana Exp $
SQL> Rem
SQL> Rem utlrp.sql
SQL> Rem
SQL> Rem Copyright (c) 1998, 2003, Oracle Corporation.  All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      utlrp.sql - Recompile invalid objects
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem     This script recompiles invalid objects in the database.
SQL> Rem
SQL> Rem     When run as one of the last steps during upgrade or downgrade,
SQL> Rem     this script will validate all remaining invalid objects. It will
SQL> Rem     also run a component validation procedure for each component in
SQL> Rem     the database. See the README notes for your current release and
SQL> Rem     the Oracle Database Upgrade book for more information about
SQL> Rem     using utlrp.sql
SQL> Rem
SQL> Rem     Although invalid objects are automatically re-validated when used,
SQL> Rem     it is useful to run this script after an upgrade or downgrade and
SQL> Rem     after applying a patch. This minimizes latencies caused by
SQL> Rem     on-demand recompilation. Oracle strongly recommends running this
SQL> Rem     script after upgrades, downgrades and patches.
SQL> Rem
SQL> Rem   NOTES
SQL> Rem      * This script must be run using SQL*PLUS.
SQL> Rem      * You must be connected AS SYSDBA to run this script.
SQL> Rem      * There should be no other DDL on the database while running the
SQL> Rem        script.  Not following this recommendation may lead to deadlocks.
SQL> Rem
SQL> Rem   MODIFIED   (MM/DD/YY)
SQL> Rem    gviswana    06/26/03 - Switch default to parallel if appropriate
SQL> Rem    gviswana    06/12/03 - Switch default back to serial
SQL> Rem    gviswana    05/20/03 - 2814808: Automatic parallelism tuning
SQL> Rem    rburns      04/28/03 - timestamps and serveroutput for diagnostics
SQL> Rem    gviswana    04/13/03 - utlrcmp.sql load -> catproc
SQL> Rem    gviswana    06/25/02 - Add documentation
SQL> Rem    gviswana    11/12/01 - Use utl_recomp.recomp_serial
SQL> Rem    rdecker     11/09/01 - ADD ALTER library support FOR bug 1952368
SQL> Rem    rburns      11/12/01 - validate all components after compiles
SQL> Rem    rburns      11/06/01 - fix invalid CATPROC call
SQL> Rem    rburns      09/29/01 - use 9.2.0
SQL> Rem    rburns      09/20/01 - add check for CATPROC valid
SQL> Rem    rburns      07/06/01 - get version from instance view
SQL> Rem    rburns      05/09/01 - fix for use with 8.1.x
SQL> Rem    arithikr    04/17/01 - 1703753: recompile object type# 29,32,33
SQL> Rem    skabraha    09/25/00 - validate is now a keyword
SQL> Rem    kosinski    06/14/00 - Persistent parameters
SQL> Rem    skabraha    06/05/00 - validate tables also
SQL> Rem    jdavison    04/11/00 - Modify usage notes for 8.2 changes.
SQL> Rem    rshaikh     09/22/99 - quote name for recompile
SQL> Rem    ncramesh    08/04/98 - change for sqlplus
SQL> Rem    usundara    06/03/98 - merge from 8.0.5
SQL> Rem    usundara    04/29/98 - creation (split from utlirp.sql).
SQL> Rem                           Mark Ramacher (mramache) was the original
SQL> Rem                           author of this script.
SQL> Rem
SQL>
SQL> Rem ===========================================================================
SQL> Rem BEGIN utlrp.sql
SQL> Rem ===========================================================================
SQL>
SQL> @@utlprp.sql 0
SQL> Rem Copyright (c) 2003, 2011, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      utlprp.sql - Recompile invalid objects in the database
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script recompiles invalid objects in the database.
SQL> Rem
SQL> Rem      This script is typically used to recompile invalid objects
SQL> Rem      remaining at the end of a database upgrade or downgrade.
SQL> Rem
SQL> Rem      Although invalid objects are automatically recompiled on demand,
SQL> Rem      running this script ahead of time will reduce or eliminate
SQL> Rem      latencies due to automatic recompilation.
SQL> Rem
SQL> Rem      This script is a wrapper based on the UTL_RECOMP package.
SQL> Rem      UTL_RECOMP provides a more general recompilation interface,
SQL> Rem      including options to recompile objects in a single schema. Please
SQL> Rem      see the documentation for package UTL_RECOMP for more details.
SQL> Rem
SQL> Rem    INPUTS
SQL> Rem      The degree of parallelism for recompilation can be controlled by
SQL> Rem      providing a parameter to this script. If this parameter is 0 or
SQL> Rem      NULL, UTL_RECOMP will automatically determine the appropriate
SQL> Rem      level of parallelism based on Oracle parameters cpu_count and
SQL> Rem      parallel_threads_per_cpu. If the parameter is 1, sequential
SQL> Rem      recompilation is used. Please see the documentation for package
SQL> Rem      UTL_RECOMP for more details.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      * You must be connected AS SYSDBA to run this script.
SQL> Rem      * There should be no other DDL on the database while running the
SQL> Rem        script.  Not following this recommendation may lead to deadlocks.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    kquinn      11/01/11 - 13059165: amend 'OBJECTS WITH ERRORS' SQL
SQL> Rem    cdilling    05/15/10 - fix bug 9712478 - call local enquote_name
SQL> Rem    anighosh    02/19/09 - #(8264899): re-enabling of function based indexes
SQL> Rem                           not needed.
SQL> Rem    cdilling    07/21/08 - check bitand for functional index - bug 7243270
SQL> Rem    cdilling    01/21/08 - add support for ORA-30552
SQL> Rem    cdilling    08/27/07 - check disabled indexes only
SQL> Rem    cdilling    05/22/07 - add support for ORA-38301
SQL> Rem    cdilling    02/19/07 - 5530085 - renable invalid indexes
SQL> Rem    rburns      03/17/05 - use dbms_registry_sys
SQL> Rem    gviswana    02/07/05 - Post-compilation diagnostics
SQL> Rem    gviswana    09/09/04 - Auto tuning and diagnosability
SQL> Rem    rburns      09/20/04 - fix validate_components
SQL> Rem    gviswana    12/09/03 - Move functional-index re-enable here
SQL> Rem    gviswana    06/04/03 - gviswana_bug-2814808
SQL> Rem    gviswana    05/28/03 - Created
SQL> Rem
SQL>
SQL> SET VERIFY OFF;
SQL>
SQL> SELECT dbms_registry_sys.time_stamp('utlrp_bgn') as timestamp from dual;

TIMESTAMP
--------------------------------------------------------------------------------
COMP_TIMESTAMP UTLRP_BGN  2018-04-21 10:34:33

1 row selected.

SQL>
SQL> DOC
DOC>   The following PL/SQL block invokes UTL_RECOMP to recompile invalid
DOC>   objects in the database. Recompilation time is proportional to the
DOC>   number of invalid objects in the database, so this command may take
DOC>   a long time to execute on a database with a large number of invalid
DOC>   objects.
DOC>
DOC>   Use the following queries to track recompilation progress:
DOC>
DOC>   1. Query returning the number of invalid objects remaining. This
DOC>      number should decrease with time.
DOC>         SELECT COUNT(*) FROM obj$ WHERE status IN (4, 5, 6);
DOC>
DOC>   2. Query returning the number of objects compiled so far. This number
DOC>      should increase with time.
DOC>         SELECT COUNT(*) FROM UTL_RECOMP_COMPILED;
DOC>
DOC>   This script automatically chooses serial or parallel recompilation
DOC>   based on the number of CPUs available (parameter cpu_count) multiplied
DOC>   by the number of threads per CPU (parameter parallel_threads_per_cpu).
DOC>   On RAC, this number is added across all RAC nodes.
DOC>
DOC>   UTL_RECOMP uses DBMS_SCHEDULER to create jobs for parallel
DOC>   recompilation. Jobs are created without instance affinity so that they
DOC>   can migrate across RAC nodes. Use the following queries to verify
DOC>   whether UTL_RECOMP jobs are being created and run correctly:
DOC>
DOC>   1. Query showing jobs created by UTL_RECOMP
DOC>         SELECT job_name FROM dba_scheduler_jobs
DOC>            WHERE job_name like 'UTL_RECOMP_SLAVE_%';
DOC>
DOC>   2. Query showing UTL_RECOMP jobs that are running
DOC>         SELECT job_name FROM dba_scheduler_running_jobs
DOC>            WHERE job_name like 'UTL_RECOMP_SLAVE_%';
DOC>#
SQL>
SQL> DECLARE
  2     threads pls_integer := &&1;
  3  BEGIN
  4     utl_recomp.recomp_parallel(threads);
  5  END;
  6  /
DECLARE
*
ERROR at line 1:
ORA-32044: cycle detected while executing recursive WITH query
ORA-06512: at "SYS.UTL_RECOMP", line 865
ORA-06512: at line 4


Disconnected from Oracle Database 12c Enterprise Edition Release 12.1.0.1.0 - 64bit Production
With the Partitioning, OLAP, Advanced Analytics and Real Application Testing options





