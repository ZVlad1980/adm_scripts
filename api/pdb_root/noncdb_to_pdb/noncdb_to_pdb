ALTER SESSION SET CONTAINER=pdb_node;

Session altered.

SQL> @$ORACLE_HOME/rdbms/admin/noncdb_to_pdb.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/noncdb_to_pdb.sql /st_rdbms_12.1.0.1/9 2013/04/14 20:05:50 talliu Exp $
SQL> Rem
SQL> Rem noncdb_to_pdb.sql
SQL> Rem
SQL> Rem Copyright (c) 2011, 2013, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem         noncdb_to_pdb.sql - Convert PDB
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem         Converts DB to PDB.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem         Given a DB with proper obj$ common bits set, we convert it to a proper
SQL> Rem         PDB by deleting unnecessary metadata.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    sankejai    04/11/13 - 16530655: do not update status in container$
SQL> Rem    pyam        04/03/13 - rename temp cdb$* views, to not interfere when
SQL> Rem                           this is run in multiple PDBs simultaneously
SQL> Rem    pyam        02/06/13 - error out for non-CDB
SQL> Rem    pyam        01/21/13 - stop exiting on sqlerror at end
SQL> Rem    pyam        01/15/13 - leave PDB in state in which it started
SQL> Rem    pyam        11/30/12 - delete services SYS$BACKGROUND and SYS$USERS
SQL> Rem    jomcdon     11/16/12 - bug 15894059: fix DBRM code for non-SYS
SQL> Rem    pyam        11/15/12 - set nls_length_semantics=byte
SQL> Rem    pyam        11/13/12 - skip old version types, update common user bit
SQL> Rem    jomcdon     11/07/12 - bug 14800566: fix resource manager plans for pdb
SQL> Rem    pyam        10/18/12 - add _noncdb_to_pdb
SQL> Rem    pyam        09/27/12 - support plug of upgraded db
SQL> Rem    pyam        08/13/12 - remove switches from PL/SQL, disable system triggers
SQL> Rem    pyam        06/26/12 - rename script to noncdb_to_pdb.sql
SQL> Rem    pyam        02/23/12 - validate v_$parameter properly
SQL> Rem    pyam        09/29/11 - Created
SQL> Rem
SQL>
SQL> SET ECHO ON
SQL> SET SERVEROUTPUT ON
SQL> SET FEEDBACK 1
SQL> SET NUMWIDTH 10
SQL> SET LINESIZE 80
SQL> SET TRIMSPOOL ON
SQL> SET TAB OFF
SQL> SET PAGESIZE 100
SQL>
SQL> WHENEVER SQLERROR EXIT;
SQL>
SQL> DOC
DOC>#######################################################################
DOC>#######################################################################
DOC>   The following statement will cause an "ORA-01403: no data found"
DOC>   error if we're not in a PDB.
DOC>   This script is intended to be run right after plugin of a PDB,
DOC>   while inside the PDB.
DOC>#######################################################################
DOC>#######################################################################
DOC>#
SQL>
SQL> VARIABLE cdbname VARCHAR2(128)
SQL> VARIABLE pdbname VARCHAR2(128)
SQL> BEGIN
  2    SELECT sys_context('USERENV', 'CDB_NAME')
  3      INTO :cdbname
  4      FROM dual
  5      WHERE sys_context('USERENV', 'CDB_NAME') is not null;
  6    SELECT sys_context('USERENV', 'CON_NAME')
  7      INTO :pdbname
  8      FROM dual
  9      WHERE sys_context('USERENV', 'CON_NAME') <> 'CDB$ROOT';
 10  END;
 11  /

PL/SQL procedure successfully completed.

SQL>
SQL> COLUMN pdbname NEW_VALUE pdbname
SQL> COLUMN pdbid NEW_VALUE pdbid
SQL>
SQL> select :pdbname pdbname from dual;

PDBNAME
--------------------------------------------------------------------------------
PDB_NODE

1 row selected.

SQL>
SQL> select TO_CHAR(con_id) pdbid from v$pdbs where name='&pdbname';

PDBID
----------------------------------------
4

1 row selected.

SQL>
SQL> -- save pluggable database open mode
SQL> COLUMN open_state_col NEW_VALUE open_sql;
SQL> COLUMN restricted_col NEW_VALUE restricted_state;
SQL> SELECT decode(open_mode,
  2                'READ ONLY', 'ALTER PLUGGABLE DATABASE &pdbname OPEN READ ONLY',
  3                'READ WRITE', 'ALTER PLUGGABLE DATABASE &pdbname OPEN', '')
  4           open_state_col,
  5         decode(restricted, 'YES', 'RESTRICTED', '')
  6           restricted_col
  7         from v$pdbs where name='&pdbname';

OPEN_STATE_COL                                   RESTRICTED
------------------------------------------------ ----------


1 row selected.

SQL>
SQL> -- save value for _system_trig_enabled parameter
SQL> COLUMN sys_trig NEW_VALUE sys_trig_enabled  NOPRINT;
SQL> SELECT parm_values.ksppstvl as sys_trig
  2     FROM sys.x$ksppi parms, sys.x$ksppsv parm_values
  3     WHERE parms.ksppinm = '_system_trig_enabled' AND
  4           parms.inst_id = USERENV('Instance') AND
  5           parms.indx = parm_values.indx;




1 row selected.

SQL>
SQL> -- if pdb was already closed, don't exit on error
SQL> WHENEVER SQLERROR CONTINUE;
SQL>
SQL> alter pluggable database "&pdbname" close;
alter pluggable database "PDB_NODE" close
*
ERROR at line 1:
ORA-65020: pluggable database PDB_NODE already closed


SQL>
SQL> WHENEVER SQLERROR EXIT;
SQL>
SQL> alter session set container = CDB$ROOT;

Session altered.

SQL> alter system flush shared_pool;

System altered.

SQL> /

System altered.

SQL> /

System altered.

SQL> alter session set container = "&pdbname";

Session altered.

SQL>
SQL> alter pluggable database "&pdbname" open restricted;

Warning: PDB altered with errors.

SQL>
SQL> -- initial setup before beginning the script
SQL> alter session set "_ORACLE_SCRIPT"=true;

Session altered.

SQL> alter session set "_NONCDB_TO_PDB"=true;

Session altered.

SQL> ALTER SESSION SET NLS_LENGTH_SEMANTICS=BYTE;

Session altered.

SQL> ALTER SYSTEM SET "_system_trig_enabled"=FALSE SCOPE=MEMORY;

System altered.

SQL> exec dbms_pdb.noncdb_to_pdb(1);

PL/SQL procedure successfully completed.

SQL>
SQL> -- if we're plugging in a database that had been upgraded, we need to:
SQL> -- 1) generate signatures for common tables
SQL> -- 2) patch up tables that with column order differences. This can happen due
SQL> --    to db creation scripts adding columns to the middle of a table vs
SQL> --    upgrade scripts adding to the end via ALTER TABLE ADD
SQL>
SQL> alter session set container=CDB$ROOT;

Session altered.

SQL>
SQL> -- create temporary object-linked view to get list of objects marked as common
SQL> -- in CDB$ROOT
SQL> create or replace view sys.cdb$common_root_objects&pdbid sharing=object as
  2  select u.name owner, o.name object_name, o.type# object_type, o.namespace nsp,
  3         o.subname object_subname, o.signature object_sig,
  4         decode(bitand(o.flags, 65536), 65536, 'MDL', 'OBL') sharing
  5    from sys.obj$ o, sys.user$ u where
  6    o.owner#=u.user# and bitand(o.flags, 196608) <> 0;

View created.

SQL>
SQL> -- object-linked view for list of common users
SQL> create or replace view sys.cdb$common_users&pdbid sharing=object as
  2  select name from sys.user$ where bitand(spare1, 128) <> 0;

View created.

SQL>
SQL> -- object-linked view for accessing dependency$
SQL> create or replace view sys.cdb$rootdeps&pdbid sharing=object as select du.name as owner, do.name as name, do.type# as d_type#, do.namespace as d_namespace,pu.name as referenced_owner, po.name as referenced_name, po.type# as p_type#, po.namespace as p_namespace,d.order#,d.property,d.d_attrs,d.d_reason from sys.obj$ do, sys.obj$ po, sys.user$ du, sys.user$ pu, sys.dependency$ d where du.user#=do.owner# and pu.user#=po.owner# and do.obj#=d_obj# and po.obj#=p_obj#;

View created.

SQL>
SQL> -- switch into PDB
SQL> alter session set container="&pdbname";

Session altered.

SQL>
SQL> create or replace view sys.cdb$common_root_objects&pdbid sharing=object as
  2  select u.name owner, o.name object_name, o.type# object_type, o.namespace nsp,
  3         o.subname object_subname, o.signature object_sig,
  4         decode(bitand(o.flags, 65536), 65536, 'MDL', 'OBL') sharing
  5    from sys.obj$ o, sys.user$ u where
  6    o.owner#=u.user# and bitand(o.flags, 196608) <> 0;

View created.

SQL>
SQL> create or replace view sys.cdb$common_users&pdbid sharing=object as
  2  select name from sys.user$ where bitand(spare1, 128) <> 0;

View created.

SQL>
SQL> create or replace view sys.cdb$rootdeps&pdbid sharing=object as select du.name as owner, do.name as name, do.type# as d_type#, do.namespace as d_namespace,pu.name as referenced_owner, po.name as referenced_name, po.type# as p_type#, po.namespace as p_namespace,d.order#,d.property,d.d_attrs,d.d_reason from sys.obj$ do, sys.obj$ po, sys.user$ du, sys.user$ pu, sys.dependency$ d where du.user#=do.owner# and pu.user#=po.owner# and do.obj#=d_obj# and po.obj#=p_obj#;

View created.

SQL>
SQL> create or replace view sys.cdb$objects&pdbid sharing=none as
  2  select u.name owner, o.name object_name, o.signature object_sig, o.namespace nsp,
  3         o.subname object_subname, o.obj# object_id, o.type# object_type, o.flags flags
  4    from sys.obj$ o, sys.user$ u
  5    where o.owner#=u.user#;

View created.

SQL>
SQL> create or replace view sys.cdb$tables&pdbid sharing=none as
  2  select * from sys.cdb$objects&pdbid where object_type=2;

View created.

SQL>
SQL>
SQL> ---------------------------------------------------------------------------
SQL> -- PRE-SCRIPT CHECKS GO HERE:
SQL>
SQL> set serveroutput on
SQL>
SQL> -- Check that we have no invalid table data
SQL> DOC
DOC>#######################################################################
DOC>#######################################################################
DOC>
DOC>     The following statement will cause an "ORA-01722: invalid number"
DOC>     error, if the database contains invalid data as a result of type
DOC>     evolution which was performed without the data being converted.
DOC>
DOC>     To resolve this specific "ORA-01722: invalid number" error:
DOC>       Perform the data conversion (details below) in the pluggable database.
DOC>
DOC>     Please refer to Oracle Database Object-Relational Developer's Guide
DOC>     for more information about type evolution.
DOC>
DOC>     Data in columns of evolved types must be converted before the
DOC>     database can be converted.
DOC>
DOC>     The following commands, run inside the PDB, will perform the data
DOC>     conversion for Oracle supplied data:
DOC>
DOC>     @?/rdbms/admin/utluppkg.sql
DOC>     SET SERVEROUTPUT ON;
DOC>     exec dbms_preup.run_fixup_and_report('INVALID_SYS_TABLEDATA');
DOC>     SET SERVEROUTPUT OFF;
DOC>
DOC>     You should then confirm that any non-Oracle supplied data is also
DOC>     converted.  You should review the data and determine if it needs
DOC>     to be converted or removed.
DOC>
DOC>     To view the data that is affected by type evolution, execute the
DOC>     following inside the PDB:
DOC>
DOC>     SELECT rpad(u.name,128) TABLENAME, rpad(o.name,128) OWNER,
DOC>       rpad(c.name,128) COLNAME FROM SYS.OBJ$ o, SYS.COL$ c, SYS.COLTYPE$ t,
DOC>         SYS.USER$ u
DOC>         WHERE o.OBJ# = t.OBJ# AND c.OBJ# = t.OBJ# AND c.COL# = t.COL#
DOC>           AND t.INTCOL# = c.INTCOL# AND BITAND(t.FLAGS, 256) = 256
DOC>           AND o.OWNER# = u.USER# AND o.OWNER# NOT IN
DOC>            (SELECT UNIQUE (d.USER_ID) FROM SYS.DBA_USERS d, SYS.REGISTRY$ r
DOC>               WHERE d.USER_ID = r.SCHEMA# and r.NAMESPACE='SERVER');
DOC>
DOC>     Once the data is confirmed, the following commands, run inside the PDB,
DOC>     will convert the data returned by the above query.
DOC>
DOC>     @?/rdbms/admin/utluppkg.sql
DOC>     SET SERVEROUTPUT ON;
DOC>     exec dbms_preup.run_fixup_and_report('INVALID_USR_TABLEDATA');
DOC>     SET SERVEROUTPUT OFF;
DOC>
DOC>     Depending on the amount of data involved, converting the evolved type
DOC>     data can take a significant amount of time.
DOC>
DOC>     After this is complete, please rerun noncdb_to_pdb.sql.
DOC>
DOC>#######################################################################
DOC>#######################################################################
DOC>#
SQL>
SQL> declare
  2    do_abort boolean := false;
  3  begin
  4    if dbms_preup.condition_exists ('INVALID_SYS_TABLEDATA') then
  5      -- dump out the info
  6      dbms_preup.run_check('INVALID_SYS_TABLEDATA');
  7      do_abort := TRUE;
  8    end if;
  9    if dbms_preup.condition_exists ('INVALID_USR_TABLEDATA') THEN
 10      -- dump out the info
 11      dbms_preup.run_check('INVALID_USR_TABLEDATA');
 12      do_abort := TRUE;
 13    END IF;
 14    If do_abort THEN
 15      dbms_output.put_line ('Invalid table data.');
 16      dbms_output.put_line ('Non-CDB conversion aborting.');
 17      dbms_output.put_line ('For instructions, look for ORA-01722 in this script.');
 18      dbms_output.put_line ('Please resolve these and rerun noncdb_to_pdb.sql.');
 19      RAISE INVALID_NUMBER;
 20    end if;
 21  end;
 22  /
**********************************************************************
Check Tag:       INVALID_SYS_TABLEDATA
Check Summary:   Check for invalid (not converted) table data
Check Help Text:
ERROR: --> Invalid Oracle supplied table data found in your database.


Invalid data can be seen prior to the database upgrade
     or during PDB plug
in.  This table data must be made
     valid BEFORE upgrade or plug in.

   - To
fix the data, load the Preupgrade package and execute
     the fixup routine.

For plug in, execute the fix up routine in the PDB.


@?/rdbms/admin/utluppkg.sql
    SET SERVEROUTPUT ON;
    exec
dbms_preup.run_fixup_and_report('INVALID_SYS_TABLEDATA')
    SET SERVEROUTPUT
OFF;
Fixup Summary:
UPGRADE Oracle supplied table data prior to the database upgrade.
++++ Check Failed:
ERROR: --> Invalid Oracle supplied table data found in your database.


Invalid data can be seen prior to the database upgrade
     or during PDB plug
in.  This table data must be made
     valid BEFORE upgrade or plug in.

   - To
fix the data, load the Preupgrade package and execute
     the fixup routine.

For plug in, execute the fix up routine in the PDB.


@?/rdbms/admin/utluppkg.sql
    SET SERVEROUTPUT ON;
    exec
dbms_preup.run_fixup_and_report('INVALID_SYS_TABLEDATA')
    SET SERVEROUTPUT
OFF;
Invalid table data.
Non-CDB conversion aborting.
For instructions, look for ORA-01722 in this script.
Please resolve these and rerun noncdb_to_pdb.sql.
declare
*
ERROR at line 1:
ORA-01722: invalid number
ORA-06512: at line 19












Disconnected from Oracle Database 12c Enterprise Edition Release 12.1.0.1.0 - 64bit Production
With the Partitioning, OLAP, Advanced Analytics and Real Application Testing options





[oracle@ibm02:tstcdb]$ cd
[oracle@ibm02:~]$ . .cdb_env
[oracle@ibm02:~]$ sqlplus / as sysdba

SQL*Plus: Release 12.1.0.1.0 Production on Sat Apr 21 09:58:08 2018

Copyright (c) 1982, 2013, Oracle.  All rights reserved.


Connected to:
Oracle Database 12c Enterprise Edition Release 12.1.0.1.0 - 64bit Production
With the Partitioning, OLAP, Advanced Analytics and Real Application Testing options

SQL> show pdbs

    CON_ID CON_NAME                       OPEN MODE  RESTRICTED
---------- ------------------------------ ---------- ----------
         2 PDB$SEED                       READ ONLY  NO
         3 PDB_ROOT                       MOUNTED
         4 PDB_NODE                       READ WRITE YES
SQL> alter session set container=pdb_node
  2  /

Session altered.

SQL> @$ORACLE_HOME/rdbms/admin/utluppkg.sql

Package created.


Package body created.

SQL> SET SERVEROUTPUT ON;
exec dbms_preup.run_fixup_and_report('INVALID_SYS_TABLEDATA')
SET SERVEROUTPUT OFF;SQL>
**********************************************************************
Check Tag:     INVALID_SYS_TABLEDATA
Check Summary: Check for invalid (not converted) table data
Fix Summary:   UPGRADE Oracle supplied table data prior to the database upgrade.
**********************************************************************
Fixup Succeeded
**********************************************************************

PL/SQL procedure successfully completed.

SQL> SQL>
SQL>
SQL> show pdbs

    CON_ID CON_NAME                       OPEN MODE  RESTRICTED
---------- ------------------------------ ---------- ----------
         4 PDB_NODE                       READ WRITE YES
SQL> SELECT rpad(u.name,128) TABLENAME, rpad(o.name,128) OWNER,
  2    rpad(c.name,128) COLNAME FROM SYS.OBJ$ o, SYS.COL$ c, SYS.COLTYPE$ t,
    SYS.USER$ u
    WHERE o.OBJ# = t.OBJ# AND c.OBJ# = t.OBJ# AND c.COL# = t.COL#
  3    4    5        AND t.INTCOL# = c.INTCOL# AND BITAND(t.FLAGS, 256) = 256
      AND o.OWNER# = u.USER# AND o.OWNER# NOT IN
       (SELECT UNIQUE (d.USER_ID) FROM SYS.DBA_USERS d, SYS.REGISTRY$ r
          WHERE d.USER_ID = r.SCHEMA# and r.NAMESPACE='SERVER');  6    7    8

no rows selected

